/*
 * Natural Voice SDK
 * Natural Voice SDKs are easiest and best supported way for most developers to quickly build and iterate Natural Voice applications that integrate with our services programmatically.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TrendsSubData;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * TrendsData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-28T17:14:34.313-07:00")
public class TrendsData {
  @SerializedName("StartTrends")
  private String startTrends = null;

  @SerializedName("EndTrends")
  private String endTrends = null;

  @SerializedName("Count")
  private BigDecimal count = null;

  @SerializedName("Enough")
  private Boolean enough = null;

  @SerializedName("NlpResults")
  private TrendsSubData nlpResults = null;

  @SerializedName("ClearlyPositive")
  private TrendsSubData clearlyPositive = null;

  @SerializedName("NeutralOrMixed")
  private TrendsSubData neutralOrMixed = null;

  @SerializedName("ClearlyNegative")
  private TrendsSubData clearlyNegative = null;

  public TrendsData startTrends(String startTrends) {
    this.startTrends = startTrends;
    return this;
  }

   /**
   * Get startTrends
   * @return startTrends
  **/
  @ApiModelProperty(value = "")
  public String getStartTrends() {
    return startTrends;
  }

  public void setStartTrends(String startTrends) {
    this.startTrends = startTrends;
  }

  public TrendsData endTrends(String endTrends) {
    this.endTrends = endTrends;
    return this;
  }

   /**
   * Get endTrends
   * @return endTrends
  **/
  @ApiModelProperty(value = "")
  public String getEndTrends() {
    return endTrends;
  }

  public void setEndTrends(String endTrends) {
    this.endTrends = endTrends;
  }

  public TrendsData count(BigDecimal count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }

  public TrendsData enough(Boolean enough) {
    this.enough = enough;
    return this;
  }

   /**
   * Get enough
   * @return enough
  **/
  @ApiModelProperty(value = "")
  public Boolean getEnough() {
    return enough;
  }

  public void setEnough(Boolean enough) {
    this.enough = enough;
  }

  public TrendsData nlpResults(TrendsSubData nlpResults) {
    this.nlpResults = nlpResults;
    return this;
  }

   /**
   * Get nlpResults
   * @return nlpResults
  **/
  @ApiModelProperty(value = "")
  public TrendsSubData getNlpResults() {
    return nlpResults;
  }

  public void setNlpResults(TrendsSubData nlpResults) {
    this.nlpResults = nlpResults;
  }

  public TrendsData clearlyPositive(TrendsSubData clearlyPositive) {
    this.clearlyPositive = clearlyPositive;
    return this;
  }

   /**
   * Get clearlyPositive
   * @return clearlyPositive
  **/
  @ApiModelProperty(value = "")
  public TrendsSubData getClearlyPositive() {
    return clearlyPositive;
  }

  public void setClearlyPositive(TrendsSubData clearlyPositive) {
    this.clearlyPositive = clearlyPositive;
  }

  public TrendsData neutralOrMixed(TrendsSubData neutralOrMixed) {
    this.neutralOrMixed = neutralOrMixed;
    return this;
  }

   /**
   * Get neutralOrMixed
   * @return neutralOrMixed
  **/
  @ApiModelProperty(value = "")
  public TrendsSubData getNeutralOrMixed() {
    return neutralOrMixed;
  }

  public void setNeutralOrMixed(TrendsSubData neutralOrMixed) {
    this.neutralOrMixed = neutralOrMixed;
  }

  public TrendsData clearlyNegative(TrendsSubData clearlyNegative) {
    this.clearlyNegative = clearlyNegative;
    return this;
  }

   /**
   * Get clearlyNegative
   * @return clearlyNegative
  **/
  @ApiModelProperty(value = "")
  public TrendsSubData getClearlyNegative() {
    return clearlyNegative;
  }

  public void setClearlyNegative(TrendsSubData clearlyNegative) {
    this.clearlyNegative = clearlyNegative;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrendsData trendsData = (TrendsData) o;
    return Objects.equals(this.startTrends, trendsData.startTrends) &&
        Objects.equals(this.endTrends, trendsData.endTrends) &&
        Objects.equals(this.count, trendsData.count) &&
        Objects.equals(this.enough, trendsData.enough) &&
        Objects.equals(this.nlpResults, trendsData.nlpResults) &&
        Objects.equals(this.clearlyPositive, trendsData.clearlyPositive) &&
        Objects.equals(this.neutralOrMixed, trendsData.neutralOrMixed) &&
        Objects.equals(this.clearlyNegative, trendsData.clearlyNegative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTrends, endTrends, count, enough, nlpResults, clearlyPositive, neutralOrMixed, clearlyNegative);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrendsData {\n");
    
    sb.append("    startTrends: ").append(toIndentedString(startTrends)).append("\n");
    sb.append("    endTrends: ").append(toIndentedString(endTrends)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    enough: ").append(toIndentedString(enough)).append("\n");
    sb.append("    nlpResults: ").append(toIndentedString(nlpResults)).append("\n");
    sb.append("    clearlyPositive: ").append(toIndentedString(clearlyPositive)).append("\n");
    sb.append("    neutralOrMixed: ").append(toIndentedString(neutralOrMixed)).append("\n");
    sb.append("    clearlyNegative: ").append(toIndentedString(clearlyNegative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

